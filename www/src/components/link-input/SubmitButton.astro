---
import type { Locale } from "@/utils/get-locale";
import { localizedShortenLinkButton } from "@/i18n/components/TextInput.i18n";
import LoadingSpinner from "@/assets/LoadingSpinner.astro";
import Button from "@/components/elements/Button.astro";

interface Props {
  locale: keyof Locale;
}

const { locale } = Astro.props;
---

<Button
  id="submit-button"
  ariaBusy={false}
  ariaLabel={localizedShortenLinkButton[locale]}
>
  <div class="grid [grid-template-areas:'submitbutton'] z-0">
    <p id="button-text" class="grid gap-y-3 visible [grid-area:submitbutton]">
      {localizedShortenLinkButton[locale]}
    </p>
    <div
      id="loading-spinner"
      class="grid gap-y-3 visible opacity-0 [grid-area:submitbutton] items-center justify-center"
    >
      <LoadingSpinner />
    </div>
  </div>
</Button>

<script>
  import type { Locale } from "@/utils/get-locale";
  import { hideAllToasts } from "@/utils/toast-visibility";
  import { handleShortenLink } from "@/utils/link-utils/shorten-link";
  import { renderHistory } from "@/utils/link-utils/render-history";

  hideAllToasts();

  const button = document.getElementById("submit-button");
  const input = document.getElementById("long-url") as HTMLInputElement;
  const buttonText = document.getElementById("button-text");
  const loadingSpinner = document.getElementById("loading-spinner");
  const submitLinkSection = document.getElementById("submit-link-section");
  const shortenedLinkSection = document.getElementById(
    "shortened-link-section",
  );
  const shortenedLink = document.getElementById("shortened-link");
  const badInputToast = document.getElementById("bad-input");
  const emptyInputToast = document.getElementById("empty-input");
  const missingProtocolToast = document.getElementById("missing-protocol");
  const historySection = document.getElementById("history-section");
  const locale = historySection?.dataset.locale as keyof Locale;

  if (
    button &&
    input &&
    buttonText &&
    loadingSpinner &&
    submitLinkSection &&
    shortenedLinkSection &&
    shortenedLink &&
    badInputToast &&
    emptyInputToast &&
    missingProtocolToast
  ) {
    const updateHistoryAfterShorten = async () => {
      await handleShortenLink(
        input,
        buttonText,
        loadingSpinner,
        submitLinkSection,
        shortenedLinkSection,
        shortenedLink,
        {
          badInput: badInputToast,
          emptyInput: emptyInputToast,
          missingProtocol: missingProtocolToast,
        },
      );
      renderHistory(locale as keyof Locale);
    };

    document.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        updateHistoryAfterShorten();
      }
    });

    button.addEventListener("click", () => {
      updateHistoryAfterShorten();
    });
  }
</script>
