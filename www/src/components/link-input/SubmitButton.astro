---
import type { Locale } from "@/utils/get-locale";
import { localizedShortenLinkButton } from "@/i18n/components/TextInput.i18n";

import LoadingSpinner from "@/assets/LoadingSpinner.astro";
import Button from "@/components/elements/Button.astro";
interface Props {
  locale: keyof Locale;
}

const { locale } = Astro.props;
---

<Button
  id="submit-button"
  ariaBusy={false}
  ariaLabel={localizedShortenLinkButton[locale]}
>
  <div class="relative">
    <p id="button-text" class="relative">
      {localizedShortenLinkButton[locale]}
    </p>
    <div
      id="loading-spinner"
      class="absolute opacity-0 inset-0 flex items-center justify-center"
    >
      <LoadingSpinner />
    </div>
  </div>
</Button>

<script>
  const button = document.getElementById("submit-button");
  const toastTimeouts = new Map();
  const toastStates = new Map();

  function showToastWithTimeout(toastElement: HTMLElement, duration: number) {
    const isVisible = toastStates.get(toastElement);
    const existingTimeout = toastTimeouts.get(toastElement);

    if (isVisible && existingTimeout) {
      clearTimeout(existingTimeout);
    }

    // Replace invisible class with slide-in-out animation
    toastElement.classList.remove("invisible");
    toastElement.classList.add("slide-in-out");
    toastStates.set(toastElement, true);

    const newTimeout = setTimeout(() => {
      // When animation ends, add invisible class and remove animation class
      toastElement.classList.add("invisible");
      toastElement.classList.remove("slide-in-out");
      toastStates.set(toastElement, false);
    }, duration);

    toastTimeouts.set(toastElement, newTimeout);
  }

  async function handleSubmit() {
    const input = document.getElementById("long-url") as HTMLInputElement;
    const buttonText = document.getElementById(
      "button-text",
    ) as HTMLParagraphElement;
    const loadingSpinner = document.getElementById(
      "loading-spinner",
    ) as HTMLDivElement;
    const submitLinkSection = document.getElementById("submit-link-section");
    const shortenedLinkSection = document.getElementById(
      "shortened-link-section",
    );
    const shortenedLink = document.getElementById("shortened-link");
    const badInputToast = document.getElementById("bad-input");
    const kvLatencyToast = document.getElementById("kv-latency");
    const emptyInputToast = document.getElementById("empty-input");

    if (
      !input ||
      !buttonText ||
      !loadingSpinner ||
      !submitLinkSection ||
      !shortenedLinkSection ||
      !shortenedLink ||
      !badInputToast ||
      !kvLatencyToast ||
      !emptyInputToast
    ) {
      return;
    }

    const url = input.value;

    if (!url) {
      showToastWithTimeout(emptyInputToast, 3000);
      return;
    }

    buttonText.style.opacity = "0";
    loadingSpinner.style.opacity = "1";

    try {
      const response = await fetch("https://jfa.ovh/api", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url }),
      });

      const result = await response.json();
      const key = result.key;
      const shortenedUrl = `https://jfa.ovh/${key}`;

      submitLinkSection.classList.remove("visible");
      submitLinkSection.classList.add("invisible");
      shortenedLinkSection.classList.remove("invisible");
      shortenedLinkSection.classList.add("visible");
      shortenedLink.textContent = shortenedUrl;

      showToastWithTimeout(kvLatencyToast, 3000);
    } catch (error) {
      console.error("Error:", error);
      showToastWithTimeout(badInputToast, 3000);
    } finally {
      buttonText.style.opacity = "1";
      loadingSpinner.style.opacity = "0";
    }
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      handleSubmit();
    }
  });

  button?.addEventListener("click", handleSubmit);
</script>
